package org.vulhunter.common.sqlinjection;

import org.vulhunter.util.JDBCUtil;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.io.IOException;
import java.sql.*;

public class ExecuteSql {

  private static MyDataSource myDataSource = new MyDataSource();

  public static void executeQuery(String sql) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.executeQuery(sql);
    } catch (SQLException e) {
      e.printStackTrace();
    } finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void addBatchAndCleanBatch(String sql) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.addBatch(sql);
      stmt.clearBatch();
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static ResultSet execute(String sql) {
    ResultSet resultSet = null;
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      resultSet = stmt.executeQuery(sql);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(resultSet,stmt, conn);
    }
    return resultSet;
  }

  public static String executeAndReturnString(String sql) {
    ResultSet results = null;
    Statement stmt = null;
    Connection conn = null;
    StringBuffer output = new StringBuffer();
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
              ResultSet.CONCUR_READ_ONLY);
      results = stmt.executeQuery(sql);

      try {
        if ((results != null) && (results.first())) {
          ResultSetMetaData resultsMetaData = results.getMetaData();
          output.append(writeTable(results, resultsMetaData));
          results.last();

          return output.toString();
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(results,stmt, conn);
    }
    return output.toString();
  }

  public static String writeTable(ResultSet results, ResultSetMetaData resultsMetaData) throws IOException,
          SQLException {
    int numColumns = resultsMetaData.getColumnCount();
    results.beforeFirst();
    StringBuffer t = new StringBuffer();
    t.append("<p>");

    if (results.next()) {
      for (int i = 1; i < (numColumns + 1); i++) {
        t.append(resultsMetaData.getColumnName(i));
        t.append(", ");
      }

      t.append("<br />");
      results.beforeFirst();

      while (results.next()) {

        for (int i = 1; i < (numColumns + 1); i++) {
          t.append(results.getString(i));
          t.append(", ");
        }

        t.append("<br />");
      }

    } else {
      t.append("Query Successful; however no data was returned from this query.");
    }

    t.append("</p>");
    return (t.toString());
  }

  public static void execute(String sql, int autoGeneratedKeys) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.execute(sql, autoGeneratedKeys);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void execute(String sql, int[] columnIndexes) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.execute(sql, columnIndexes);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void execute(String sql, String[] columnNames) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.execute(sql, columnNames);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

    /* java.sql.Statement.executeLargeUpdate since jdk1.8
     * public static void executeLargeUpdate(String sql) {
        try {
            Statement stmt = conn.createStatement();
            stmt.executeLargeUpdate(sql);
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void executeLargeUpdate(String sql, int autoGeneratedKeys) {
        try {
            Statement stmt = conn.createStatement();
            stmt.executeLargeUpdate(sql, autoGeneratedKeys);
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void executeLargeUpdate(String sql, int[] columnIndexes) {
        try {
            Statement stmt = conn.createStatement();
            stmt.executeLargeUpdate(sql, columnIndexes);
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void executeLargeUpdate(String sql, String[] columnNames) {
        try {
            Statement stmt = conn.createStatement();
            stmt.executeLargeUpdate(sql, columnNames);
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }*/

  public static void executeUpdate(String sql) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.executeUpdate(sql);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void executeUpdate(String sql, int autoGeneratedKeys) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.executeUpdate(sql, autoGeneratedKeys);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }


  public static void executeUpdate(String sql, int[] columnIndexes) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.executeUpdate(sql, columnIndexes);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void executeUpdate(String sql, String[] columnNames) {
    Statement stmt = null;
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      stmt = conn.createStatement();
      stmt.executeUpdate(sql, columnNames);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.release(stmt, conn);
    }
  }

  public static void prepareCall(String sql) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareCall(sql);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareCall(sql, resultSetType, resultSetConcurrency);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareCall(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql, int autoGeneratedKeys) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql, autoGeneratedKeys);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql, int[] columnIndexes) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql, columnIndexes);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int
      resultSetHoldability) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void prepareStatement(String sql, String[] columnNames) {
    Connection conn = null;
    try {
      conn = myDataSource.getConnection();
      conn.prepareStatement(sql, columnNames);
    } catch (SQLException e) {
      e.printStackTrace();
    }finally {
      JDBCUtil.closeConn(conn);
    }
  }

  public static void createNativeQuery(String sql) {
    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("testApp");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    entityManager.createNativeQuery(sql);
  }

  public static void createNativeQuery(String sql, Class<App1User> resultClass) {
    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("testApp");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    entityManager.createNativeQuery(sql, resultClass);
  }

  public static void createNativeQuery(String sql, String resultSetMapping) {
    EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("testApp");
    EntityManager entityManager = entityManagerFactory.createEntityManager();
    entityManager.createNativeQuery(sql, resultSetMapping);
  }
}
